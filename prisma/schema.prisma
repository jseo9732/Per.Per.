generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String        @unique
  password      String
  phoneNumber   String        @unique
  birth         DateTime?
  gender        String
  snsId         String?       @unique
  snsType       String?
  personalTests Test[]
  storyLikes    StoryLike[]
  perfumeLikes  PerfumeLike[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Story {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  body        String
  tags        String[]
  imgUrl      String[]
  likeCount   Int         @default(0)
  viewCount   Int         @default(0)
  storyLikes  StoryLike[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model StoryLike {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId     String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Perfume {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name_eng      String        @unique
  name_kor      String?
  brand_eng     String
  brand_kor     String?
  note          String
  top           String
  middle        String
  bottom        String
  concentration String
  first         String
  second        String
  third         String
  fourth        String
  fifth         String
  gender        String
  imgUrl        String? 
  score         Int?          @default(0)
  likeCount     Int?          @default(0)
  viewCount     Int?          @default(0)
  createdAt     DateTime?     @default(now())  
  tests         Test[]        @relation(fields: [testIDs], references: [id])
  testIDs       String[]      @db.ObjectId
  perfumeLikes  PerfumeLike[]
}

model PerfumeLike {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  perfume     Perfume   @relation(fields: [perfumeId], references: [id], onDelete: Cascade)
  perfumeId   String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Test {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String     @db.ObjectId
  chosen       String[]   
  perfumes     Perfume[]  @relation(fields: [perfumeIDs], references: [id])
  perfumeIDs   String[]   @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Gender {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  gender        String  @unique
  m             Int 
  mUni          Int  
  uni           Int
  fUni          Int
  f             Int
}

model Concentration {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  concentration String  @unique
  daily         Int
  specialParty  Int
}

model Algorithm {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  scent         String  @unique
  spring        Int
  summer        Int
  autumn        Int
  winter        Int
  red           Int
  orange        Int
  yellow        Int
  green         Int
  blue          Int
  pink          Int
  purple        Int
  white         Int
  black         Int
  brown         Int
  vivid         Int
  delicate      Int
  sensual       Int
  comfortable   Int
  calm          Int
  adventurous   Int
  masculine     Int
  pure          Int
  mature        Int
  purehearted   Int
  feminine      Int
  intense       Int
  fresh         Int
  deep          Int
  rich          Int
  light         Int
  clean         Int
  luxurious     Int
  wild          Int
  aquatic       Int
  woody         Int
  aromatic      Int
  citrus        Int
  floral        Int
  fruity        Int
  spicy         Int
  musk          Int
  cotton_soap   Int
}

model Brand {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name_eng      String
  name_kor      String
  imgUrl        String?
}

model PerfumeDetail {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  brand         String
  ml            Int?
  price         Int?
  originUrl     String?
  description   String?
}

model Perfume_CategoryInfo {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name_eng      String
  note          String[]
  feature       String[]
  personality   String[]
}